# Originally Source From https://nodered.org/docs/getting-started/docker#docker-stack--docker-compose
# Augmented to make it more to my liking and used with some of my ansible roles.

version: '3.4'

services:
  ide:
    build:
      context: ./
      # args:
      #   DOCKER_GRP: ${DOCKER_GRP}
    image: ide:0.0.1
    restart: unless-stopped
    ports:
      - "1880:1880"
    # networks:
    #   - node-red-net
    volumes:
      - type: volume
        source: node-red-data
        target: /data
      # - type: bind
      #   source: ./data
      #   target: /data

      # NOTE To remove in production as a potential security risk as it can see the current
      # local directory and dockerfile and docker-compose.yml
      - type: bind
        source: ./
        target: /local
      # Allow the NodeRED IDE access to the Docker instance
      # NOTE To remove in production as a security risk usefult for
      # a dev IDE but need to be watched
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      # To allow easier backup of the information into a safe directory
      - type: bind
        source: ./backup
        target: /backup
      # Allows injection of an SSH key for the projects and conections
      - type: bind
        source: ./ssh
        target: /usr/src/node-red/.ssh
      # Allows injection of an certs key for the conections
      - type: bind
        source: ./certs
        target: /certs
    # # Required for permission for the docker socket
    # group_add:
    #   - ${DOCKER_GRP}
    #   # - docker
    environment:
      TZ: Europe/London
    healthcheck:
      test: curl -s http://localhost:1880 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "traefik.http.routers.nodered.rule=PathPrefix(`/nodered`)"
      # - "traefik.http.routers.twrmdash.service=twrmdash"
      - "traefik.http.routers.nodered.tls=true"
      - "traefik.http.middlewares.test-stripprefix.stripprefix.prefixes=/nodered,/nodered/"
      # Referencing a middleware
      - "traefik.http.routers.nodered.middlewares=test-stripprefix"
      - "traefik.http.services.nodered.loadbalancer.server.port=1880"
      - "traefik.http.middlewares.nodered.headers.SSLRedirect=true"
      - "traefik.http.middlewares.nodered.headers.STSSeconds=315360000"
      - "traefik.http.middlewares.nodered.headers.browserXSSFilter=true"
      - "traefik.http.middlewares.nodered.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.nodered.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.nodered.headers.STSIncludeSubdomains=true"
      - "traefik.http.middlewares.nodered.headers.STSPreload=true"
      - "traefik.http.middlewares.nodered.headers.frameDeny=true"

  traefikproxy:
    image: traefik:v2.6
    command:
      - '--api.insecure=true'
      - '--providers.docker'
      - '--providers.file.filename=/traefik/certificates.yml'
      - '--entrypoints.http=true'
      - '--entrypoints.http.address=:80'
      # - '--entrypoints.http.http.redirections.entrypoint.to=https'
      # - '--entrypoints.http.http.redirections.entrypoint.scheme=https'
      - '--entrypoints.https=true'
      - '--entrypoints.https.address=:443'
      - '--log=true'
      - '--log.level=DEBUG'
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - type: bind
        source: ./certs
        target: /certs
      - type: bind
        source: ./traefik
        target: /traefik
    ports:
    - "80:80"
    - "443:443"
    - "5004:8080"

volumes:
  node-red-data:

# networks:
#   node-red-net: